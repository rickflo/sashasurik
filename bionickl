# 1. ФИО, группа
 
Суриков Александр Дмитриевич, ИС 22/9-1

# 2. Описание БД

Моя база данных про Супер маркет
База данных имеет 5 таблиц

Таблица main (таблица хранит сведения о данных остальных таблиц)

Таблица product (таблица хранит сведения о продуктах)

Таблица purchases (таблица хранит сведения о количестве покупок)

Таблица Staff (таблица хранит сведения имени, возврасте и о номере персонала)

Таблица supplies (таблица хранит сведения о количестве поставок)

## 2.1

###### Таблица Main состоит из следущих атрибутов:
* id - создается по умолчанию, INT
* Staff_name_staff - имя к таблице Staff, VARCHAR(30)
* Staff_age_staff - возвраст к таблице Staff, VARCHAR(30)
* Staff_number_staff - номер к таблице Staff, VARCHAR(30)
* supplies_russia - поставка с россии к таблице supplies, VARCHAR(30)
* supplies_italy - поставка с италии к таблице supplies, VARCHAR(30)
* purchases_today - покупки сегодня к таблице purchases, VARCHAR(30)
* purchases_yesterday - покупки вчера к таблице purchases, VARCHAR(30)
* product_product_1 - наименование продуктов к таблице product, VARCHAR(30)
* product_product_2 - наименование продуктов к таблице product, VARCHAR(30)


![](screens/Animals1.png)

![](screens/Animals2.png)


###### Таблица product состоит из следущих атрибутов:
* id - создается по умолчанию, INT
* product_1 - наименование продуктов, VARCHAR(30)
* product_2 - наименование продуктов, VARCHAR(30)
![](screens/Employees2.png)
![](screens/Employees1.png)


###### Таблица purchases состоит из следущих атрибутов:
* id - создается по умолчанию, INT
* today - количество покупок, VARCHAR(30)
* yesterday - количество покупок, VARCHAR(30)

![](screens/feeding1.png)
![](screens/feeding2.png)


###### Таблица Staff из следущих атрибутов:
* id - создается по умолчанию, INT
* name_staff - номер сотрудника, VARCHAR(30)
* age_staff - сколько лет сотруднику, VARCHAR(30)
* number_staff - номер телефона сотрудника, VARCHAR(30)

![](screens/medical1.png)
![](screens/medical2.png)

###### Таблица supplies состоит из следущих атрибутов:
* id - создается по умолчанию, INT
* italy - поставка с италии VARCHAR(30)
* russia - поставка с россии VARCHAR(30)

![](screens/room1.png)
![](screens/room2.png)	


# 3. Демонстрация работы функции UNION

Объединения двух наборов строк
Я объединил name_staff из таблицы Staff с staff_name_staff с таблицой main

```sql
SELECT name_staff AS Имя_работнка
FROM Staff

UNION

SELECT staff_name_staff AS Имя_работника
FROM main
```

### Результат:
![](screens/union.png)

Вывелся один запрос, состоящий из двух запросов


# 4. Демонстрация работы функции ORDER BY

Сортировка полученных строк
Я отсортировал возраст работников

### По возрастанию:

```sql
SELECT Staff.name_staff, Staff.age_staff
from Staff
order by age_staff

```
![](screens/orderby1.png)

Этот запрос выводит сортировку по возрасту работников

# 5. Демонстрация работы функции HAVING

Получение данных из таблицы базы, соответствующих определённым значениям результатов
Я вывел имя животных у которых вес больше 200 кг

```sql
SELECT age_staff
From Staff
GROUP BY age_staff
HAVING age_staff < 20

	
```

![](screens/having.png)

Вывелась таблица с животными, у которых вес больше двухсот килограмм


# 6. Демонстрация работы вложенных запросов

## 6.1 В SELECT

Хочу вывести количество сотрудников младше 20

```sql
SELECT ( SELECT COUNT(*) 
        FROM Staff 
        WHERE age_staff < 20 ) as количество_сотрудников_младше_20
        FROM Staff
```

![](screens/attached_request.png)

Вывелась таблица с количеством сотрудников младше 20 с помощью вложенного запроса

## 6.2 В WHERE

Хочу вывести сутрудника и их номера телефонов сотрудников оканчивающиеся на 1

```sql
SELECT name_staff, number_staff
FROM Staff
WHERE Staff.number_staff	in (
  SELECT number_staff FROM Staff WHERE number_staff LIKE '%1'
  );

```

![](screens/attached_request2.png)

Вывелась таблица с именами сотрудников и номера телефонов оканчивающиеся на 1


# 7. Демонстрация работы оконных функций

## 7.1 Агрегатные функции

Хочу вывести минимальный, средний и максимальный возраст
```sql

SELECT Min(age_staff) AS МинимальныйВозраст, AVG(age_staff) AS СреднийВозраст, Max(age_staff) as МаксимальныйВозраст
FROM Staff

```
Вывелась таблица с минимальным, средним и максимальным возрастом сотрудников
## 7.2 РАНЖИРУЮЩИЕ ФУНКЦИИ
Запрос использует ранжирующую функцию для присвоения ранга каждому сотруднику на основе порядка его первой буквы имени. 
Ранги упорядочены по убыванию. Результат покажет ранг каждого сотрудника вместе с его именем

```sql
SELECT id, name_staff, RANK() OVER (ORDER BY name_staff DESC) AS name_staff_rank
FROM Staff;
```
## 7.3 ФУНКЦИИ СМЕЩЕНИЯ
Выводим возраст сотрудника в следующем году.
Вывелся возраст сотрудника в следующем году.

```sql
SELECT name_staff, age_staff, LEAD(age_staff) OVER (ORDER BY age_staff) AS СледующийВозрастСотрудника
FROM Staff
```
# 8 JOIN
## 8.1 INNER JOIN
# 9 CASE

```sql
SELECT Staff.name_staff,
	CASE
    	WHEN name_staff LIKE 'А%' THEN '1'
    	WHEN name_staff LIKE 'В%' THEN '2'
        ELSE name_staff = '0'
    END AS циферки
FROM Staff

```
Вывод имен сотрудников, начинающихся на В - 2, имена сотрудников на А - 1, остальные 0

# 10 WITH

